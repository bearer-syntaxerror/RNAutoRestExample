"use strict";
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const msRest = require("@azure/ms-rest-js");
const Mappers = require("../models/builderBeaconsMappers");
const Parameters = require("../models/parameters");
/** Class representing a BuilderBeacons. */
class BuilderBeacons {
    /**
     * Create a BuilderBeacons.
     * @param {AdventuresApiClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    get(id, minorId, options, callback) {
        return this.client.sendOperationRequest({
            id,
            minorId,
            options
        }, getOperationSpec, callback);
    }
    deleteMethod(id, minorId, options, callback) {
        return this.client.sendOperationRequest({
            id,
            minorId,
            options
        }, deleteMethodOperationSpec, callback);
    }
    put(value, options, callback) {
        return this.client.sendOperationRequest({
            value,
            options
        }, putOperationSpec, callback);
    }
    post(value, options, callback) {
        return this.client.sendOperationRequest({
            value,
            options
        }, postOperationSpec, callback);
    }
}
exports.BuilderBeacons = BuilderBeacons;
// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec = {
    httpMethod: "GET",
    path: "api/builder/beacons/{id}",
    urlParameters: [
        Parameters.id1
    ],
    queryParameters: [
        Parameters.minorId
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Beacon
        },
        401: {},
        404: {},
        default: {}
    },
    serializer
};
const deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "api/builder/beacons/{id}",
    urlParameters: [
        Parameters.id1
    ],
    queryParameters: [
        Parameters.minorId
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        204: {},
        401: {},
        default: {}
    },
    serializer
};
const putOperationSpec = {
    httpMethod: "PUT",
    path: "api/builder/beacons",
    requestBody: {
        parameterPath: "value",
        mapper: Object.assign({}, Mappers.Beacon, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        204: {},
        401: {},
        default: {}
    },
    serializer
};
const postOperationSpec = {
    httpMethod: "POST",
    path: "api/builder/beacons",
    requestBody: {
        parameterPath: "value",
        mapper: Object.assign({}, Mappers.Beacon, { required: true })
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            }
        },
        201: {
            bodyMapper: Mappers.Beacon
        },
        401: {},
        default: {}
    },
    serializer
};
//# sourceMappingURL=builderBeacons.js.map